- hosts: localhost
  collections:
    - mattclay.aws
  gather_facts: False
  vars:
    aws_region: "us-east-1"
    packaging_dir: "{{ playbook_dir }}/../.cache/packaging"
  tasks:
    - name: load config
      tags: always
      include_vars:
        file: config.yml
    - name: get aws account facts
      tags: always
      aws_account_facts:
    - name: show configuration
      tags: always
      debug: msg="aws_region={{ aws_region }}, aws_account_id={{ aws_account_id }}"
    - name: init managed policies
      tags: always
      set_fact:
        managed_policies: []
    - block:
        - name: Create a list of policy file names without the path or extension
          tags: iam
          ansible.builtin.find:
            paths: policy
            patterns: ['*.yaml', '*.yml']
          register: policies
        - name: Check policies do not exceed AWS size limits
          tags: iam
          assert:
            that:
              - "{{ lookup('template', item) | from_yaml | to_json |length < 6144 }}"
          with_items: "{{ policies.files | map(attribute='path') | list }}"
        - name: create iam managed policy for test permission groups
          tags: iam
          iam_managed_policy:
            policy_name: '{{ item | basename | regex_replace("^(.*)\.(yaml|yml)$", api_name + "-\1") }}'
            state: present
            policy_description: '{{ item | basename | regex_replace("^(.*)\.(yaml|yml)$", api_name + "-\1") }} policy for terminator cleanup'
            policy: "{{ lookup('template', item) | from_yaml | to_json }}"
          with_items: "{{ policies.files | map(attribute='path') | list }}"
          register: create_policies
        - name: create list of managed policies arn
          set_fact:
            managed_policies: "{{ create_policies.results | map(attribute='policy.arn') | list }}"
    - name: create iam role for terminator functions
      tags: iam
      amazon.aws.iam_role:
        name: "{{ iam_role_name }}"
        description: "iam role for terminator functions"
        state: present
        assume_role_policy_document: "{{ iam_role_policy_document }}"
        managed_policies: "{{ managed_policies }}"
        create_instance_profile: false
      register: iam_role_info
    - name: create virtualenv with terminator requirements
      tags: lambda
      pip:
        requirements: "{{ playbook_dir }}/requirements.txt"
        virtualenv: "{{ packaging_dir }}/terminator-requirements/python"
        virtualenv_python: python3.9
    - name: package terminator requirements
      tags: lambda
      lambda_package:
        src: "{{ packaging_dir }}/terminator-requirements"
        dest: "{{ packaging_dir }}/terminator-requirements.zip"
        include:
          - "{{ packaging_dir }}/terminator-requirements/python/lib/python3.9/site-packages/*"
        exclude:
          # pre-compiled bytecode
          - "*.pyc"
          # packaging information not needed at runtime
          - "*.dist-info/*"
          # only used for botocore documentation generation
          - "{{ packaging_dir }}/terminator-requirements/python/lib/python3.9/site-packages/docutils/*"
          # installed during creation of the virtualenv
          - "{{ packaging_dir }}/terminator-requirements/python/lib/python3.9/site-packages/pip/*"
          - "{{ packaging_dir }}/terminator-requirements/python/lib/python3.9/site-packages/wheel/*"
          - "{{ packaging_dir }}/terminator-requirements/python/lib/python3.9/site-packages/setuptools/*"
          - "{{ packaging_dir }}/terminator-requirements/python/lib/python3.9/site-packages/pkg_resources/*"
          - "{{ packaging_dir }}/terminator-requirements/python/lib/python3.9/site-packages/easy_install.py"
    - name: publish terminator requirements layer
      tags: lambda
      lambda_layer:
        name: "{{ lambda_layer_name }}"
        description: "Python requirements for {{ lambda_name }}-* lambdas"
        compatible_runtimes:
          - python3.9
        path: "{{ packaging_dir }}/terminator-requirements.zip"
        license_info: GPL-3.0-only
        region: "{{ aws_region }}"
        state: present
      register: terminator_requirements_layer
    - name: create terminator package
      tags: lambda
      lambda_package:
        src: "{{ playbook_dir }}"
        dest: "{{ packaging_dir }}/terminator.zip"
        include:
          - "{{ playbook_dir }}/terminator_lambda.py"
          - "{{ playbook_dir }}/terminator/*.py"
    - name: Deploy lambdas
      tags:
        - schedule
        - lambda
      ansible.builtin.include_tasks: deploy_lambda.yml
      with_items: "{{ terminator_region_group_config }}"
      vars:
        terminator_package_path: "{{ packaging_dir }}/terminator.zip"
        terminator_layer_arn: "{{ terminator_requirements_layer.layer.layer_version_arn }}"
